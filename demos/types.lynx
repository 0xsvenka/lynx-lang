data Option : Type -> Type
  | some : %~A -> A -> Option A
  | none : %~A -> Option A

data Expr : Type -> Type
  | int_expr : Int -> Expr Int
  | bool_expr : Bool -> Expr Bool
  | add_expr : Expr Int -> Expr Int -> Expr Int
  | eq_expr : %~A -> Expr A -> Expr A -> Expr Bool

data Vec : Nat -> Type -> Type
  | vnil : %~A -> Vec 0 A
  | vcons : %(Nat~n) -> %~A -> A -> Vec n A -> Vec (Suc n) A

Person = {| name : Str, age : Nat |};
p : Person = { name = "Emma", age = 35 }

Point = (|Int, Int|);
origin : Point = (0, 0);
single_int = (1,)

Str = [|Char|];
greeting : Str = ['H', 'e', 'l', 'l', 'o']
