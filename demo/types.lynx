Option : Type -> Type               # PascalCase indicates constructor
Option a =
    Some : %~a -> a -> Option a     # In a type context, we should write `type ~ term`
                                    #     instead of `term : type`; moreover,
                                    #     `%~a` is syntax sugar for `%(Type ~ a)`
  | None : %~a -> Option a

IntList = [|Int|]                   # `[|a|]` is syntax sugar for `List a`

Expr : Type -> Type                 # An example of GADT
Expr a =
    IntExpr : Int -> Expr Int
  | BoolExpr : Bool -> Expr Bool
  | AddExpr : Expr Int -> Expr Int -> Expr Int
  | EqExpr : Expr a' -> Expr a' -> Expr Bool

len : %(Nat ~ n) -> %~a -> List n a -> Nat      # Dependent type
len [] = 0
len (_ +: tail) = 1 + len tail

[] : %~a -> List a                  # Polymorphic `[]`
[] = %a => Nil %a                   # TODO: More distinction, not just `%` for all cases

(+:) : %(Nat ~ n) -> %~a -> a -> List n a -> List (n+1) a
(+:) = %n => %a => head => tail => Cons head tail
